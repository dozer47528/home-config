#!/usr/bin/env python3
import os
import subprocess
import sys
import time
import signal

signal.signal(signal.SIGINT, lambda x, y: sys.exit(0))

RED = '\033[0;31m'
YELLOW = '\033[1;33m'
NC = '\033[0m'
CUSTOM_ARGS = ["-s", "--sidecar", "--sh"]
KUBE_COMMAND_WITHOUT_TARGET = ["version", "api-resources", "api-versions", "proxy"]

KUBE_CTX_EXPIRED_TIME=10*60

# run command with pipeline
def command(cmds):
    sp = None
    for cmd in cmds:
        sp = subprocess.Popen(cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE,
                              stdin=sp.stdout if sp is not None else None)
    return sp.communicate()[0].decode("utf-8").strip("\n")


def container_help():
    print("""
Sidecar Container Help:
  -s, --sidecar='': Choose app container or sidecar container""")


def exec_help():
    print("""
Exec Help:
  --sh='': Use sh instead of bash 
""")


if __name__ == "__main__":
    # Get real kubectl
    kubectl_cmd = command([["which", "-a", "kubectl"], ["grep", "-v", "'%s'" % sys.argv[0]], ["tail", "-n", "1"]])  # fetch real kubectl path
    if kubectl_cmd == sys.argv[0]:
        print("Missing kubectl command!")
        exit(1)
    kube_command = sys.argv[1]

    # Fetch unprotected_context
    if os.getenv("UNPROTECTED_CONTEXT") is not None:
        unprotected_context = [c.lower() for c in os.getenv("UNPROTECTED_CONTEXT").split(":")]
    else:
        unprotected_context = []

    # Check session expired
    kube_config = os.getenv("KUBECONFIG")
    if kube_config and os.path.exists(kube_config) and kube_command not in ["config", "plugin", "version"]:
        if os.path.getatime(kube_config) + KUBE_CTX_EXPIRED_TIME < time.time():
            current_context = command([[kubectl_cmd, "config", "current-context"]])
            current_namespace = command([[kubectl_cmd, "config", "view", "--minify", "--output", "jsonpath={..namespace}"]])
            if current_context and current_context.lower() not in unprotected_context:
                print("%sContext: %s%s" % (RED, current_context, NC))
                print("%sNamespace: %s%s" % (RED, current_namespace if current_namespace else "default", NC))
                answer = input('%sSession expired after %d seconds. Continue? (y/N):%s' % (RED, KUBE_CTX_EXPIRED_TIME, NC))
                if not answer:
                    answer = "n"
                if answer != "y":
                    exit(1)
        os.utime(kube_config)

    full_args = sys.argv[1:]
    if len(full_args) == 0 or full_args[0] in ["-h", "--help"]:
        print(command([[kubectl_cmd, "--help"]]))
        exit(1)

    has_container_args = "-c, --container" in command([[kubectl_cmd, kube_command, "--help"]])
    from_file = kube_command not in ["logs"] and ("-f" in full_args or "--filename" in full_args)
    raw_args = [a for a in full_args[1:]
                if not a.startswith("-") and a != "--"]
    crd_name = None
    obj_name = None

    read_stdin = False
    if from_file and not os.path.isfile("-") and not sys.stdin.isatty():
        for arg in full_args:
            if arg == "--":
                break
            if arg == "-":
                read_stdin = True
                break

    if not from_file:
        if len(raw_args) == 0 and kube_command not in KUBE_COMMAND_WITHOUT_TARGET:
            print(command([[kubectl_cmd, kube_command, "--help"]]))
            if has_container_args:
                container_help()
            if kube_command == "exec":
                exec_help()
            exit(1)

        if kube_command in KUBE_COMMAND_WITHOUT_TARGET:
            crd_name = ""
            obj_name = ""
        elif kube_command in ["logs", "exec", "attach", "cp"]:
            crd_name = "pods"
            obj_name = raw_args[0]
        else:
            crd_name = raw_args[0]
            if "/" in crd_name:
                split_crd_name = crd_name.split("/", 1)
                crd_name = split_crd_name[0]
                obj_name = split_crd_name[1]
            elif len(raw_args) >= 2:
                obj_name = raw_args[1]

        # enhance container
        if has_container_args and "-c" not in full_args and "--container" not in full_args:
            containers = command([[kubectl_cmd, "get", "pods", obj_name, "-o" 'jsonpath="{.spec.containers[*].name}"']]).strip('"').split(" ")
            use_sidecar = "-s" in full_args or "--sidecar" in full_args

            sidecar_containers = [c for c in containers if c == "istio-proxy" or c.startswith("sidecar-")]
            first_sidecar_container = sidecar_containers[0] if len(sidecar_containers) > 0 else None
            app_containers = [c for c in containers if c != "istio-proxy" and c != "istio-init" and not c.startswith("sidecar-") and not c.startswith("init-")]
            first_app_container = app_containers[0] if len(app_containers) > 0 else None

            target_container = None
            if len(containers) == 0:
                pass
            elif len(containers) == 1:
                target_container = containers[0]
            elif first_sidecar_container is not None and use_sidecar:
                target_container = first_sidecar_container
            else:
                target_container = first_app_container

            if use_sidecar and first_sidecar_container is None:
                print('%ssidecar container not found, using "%s" %s' %
                      (YELLOW, target_container, NC))

            if target_container:
                full_args.insert(1, "--container")
                full_args.insert(2, target_container)

        # enhance exec
        if kube_command == "exec":
            if len(raw_args) == 1:
                if "--" not in full_args:
                    full_args.append("-it")
                if "--sh" in full_args:
                    full_args.append("/bin/sh")
                else:
                    full_args.append("/bin/bash")

    # delete edit double check
    if not read_stdin and kube_command in ["delete", "edit"]:
        color = YELLOW
        if kube_command == "delete":
            color = RED


        current_context = command([[kubectl_cmd, "config", "current-context"]])
        current_namespace = command([[kubectl_cmd, "config", "view", "--minify", "--output", "jsonpath={..namespace}"]])
        if current_context and current_context.lower() not in unprotected_context:
            print("%sContext: %s%s" % (color, current_context, NC))
            print("%sNamespace: %s%s" % (color, current_namespace, NC))
            if obj_name:
                print("%sResource: %s/%s%s" % (color, crd_name, obj_name, NC))
            else:
                print("%sResource: %s%s" % (color, crd_name, NC))

            if kube_command == "delete":
                answer = input('%sContinue? (y/N):%s' % (color, NC))
                if not answer:
                    answer = "n"
            else:
                answer = input('%sContinue? (Y/n):%s' % (color, NC))
                if not answer:
                    answer = "y"
            if answer.lower()[0] != "y":
                print("Abort!")
                exit(1)

    final_commands = [kubectl_cmd]
    exec_cmd = False
    for arg in full_args:
        if not exec_cmd and arg == "--":
            exec_cmd = True
        if arg not in CUSTOM_ARGS or exec_cmd:
            final_commands.append(arg)

    try:
        if read_stdin:
            result = subprocess.run(final_commands, stdin=sys.stdin)
        else:
            result = subprocess.run(final_commands)
        if result.returncode != 0:
            exit(result.returncode)
    except KeyboardInterrupt:
        pass
