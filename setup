#!/bin/bash

set -e


# Check for -s flag to skip interactive mode
SKIP_INTERACTIVE=false
if [ "$1" = "-s" ]; then
  SKIP_INTERACTIVE=true
fi

# Check working directory
if [ $HOME == $PWD ]; then
  echo "Error: can not put this project in home directory!"
  exit -1
fi

if [ ! -f "$PWD/setup" ]; then
  echo "Error: please run this command under project directory!"
  exit -1
fi

# Check dependency
command -v vim >/dev/null 2>&1 || { echo >&2 "I require vim but it's not installed.  Aborting."; exit 1; }
command -v zsh >/dev/null 2>&1 || { echo >&2 "I require zsh but it's not installed.  Aborting."; exit 1; }
command -v ctags >/dev/null 2>&1 || { echo >&2 "I require ctags but it's not installed.  Aborting."; exit 1; }

# Reset submodules
rm -rf .oh-my-zsh
rm -rf .vim
rm -rf .zsh-custom

# Init submodules
git submodule init
git submodule update

# Link to home
ls -A | grep -v '^setup$' | grep -v '^upgrade$' | grep -v '^README.md$' | grep -v '^.git$' | xargs -I {} rm -rf $HOME/{}
ls -A | grep -v '^setup$' | grep -v '^upgrade$'| grep -v '^README.md$' | grep -v '^.git$' | xargs -I {} ln -fs $PWD/{} $HOME/{}

# Install vim plugins
vim +PluginInstall +qall

# Change default shell
if [ "$SKIP_INTERACTIVE" = true ]; then
  echo "Skipping interactive shell change due to -s flag"
else
  echo "Input password for change default shell"
  chsh -s `which zsh`
fi